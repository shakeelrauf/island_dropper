<div class="mt-4 mt-sm-5 singledropoff">
  <div class="card card-dropOff">
    <div class="card-header dropoff-heading d-flex align-items-center position-relative collapsed" id="headingOne" data-toggle="collapse" data-target="#collapseOne<%= f.object.id %>" aria-expanded="true" aria-controls="collapseOne">
      <h4 class="dropoff-h">
        Drop Off
        <!-- <span class="ml-3">1</span>  -->
      </h4>
    </div>
      <div id="collapseOne<%= f.object.id %>" class="collapse col-dropoff" aria-labelledby="headingOne" data-parent="#accordionExample">
        <div class="card-body py-0">
          <div class="row">
            <div class="col col-12 col-md-6">
              <div class="form-group">
                <%= f.label :first_name, class: "form-label pl-md-3" %>
                <%= f.text_field :first_name, autofocus: true, class: "form-control form-field-rounded" %>
              </div>
            </div>
            <div class="col col-12 col-md-6">
              <div class="form-group">
                <%= f.label :last_name, class: "form-label pl-md-3" %>
                <%= f.text_field :last_name,class: "form-control form-field-rounded" %>
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col col-12 col-md-6">
              <div class="form-group">
                <%= f.label :address, class: "form-label pl-md-3" %>
                <%= f.text_field :address,class: "form-control form-field-rounded",id: 'autocomplete', placeholder: "Enter drop of address" %>
              </div>
            </div>
            <div class="col col-12 col-md-6">
              <div class="form-group">
                <%= f.label :phone_number, class: "form-label pl-md-3" %>
                <%= f.text_field :phone_number,class: "form-control form-field-rounded", placeholder: "355 69 2656 8 244" %>
        
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col col-12">
              <div class="form-group">
                 <%= f.label :delivery_instructions,"Instructions", class: "form-label pl-md-3" %>
                <%= f.text_field :delivery_instructions,class: "form-control form-field-rounded" %>
              </div>
            </div>
          </div>
        </div>
    </div>
</div>
<script>
  var size = $(".dropoff-heading").count;
  $("#delivery_dropoffs_attributes_"+size+"_first_name").rules("add",{
    required: true,
    messages: {
      required: "Please enter first_name."
    }
  })
</script>

<script type="text/javascript">
  <script type="text/javascript">
  google.maps.event.addDomListener(window, 'load', initialize);

     // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      var placeSearch, autocomplete;
      // var componentForm = {
      //   street_number: 'short_name',
      //   route: 'long_name',
      //   locality: 'long_name',
      //   administrative_area_level_1: 'short_name',
      //   country: 'long_name',
      //   postal_code: 'short_name'
      // };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        // autocomplete.addListener('place_changed', fillInAddress);
      }

      // function fillInAddress() {
      //   // Get the place details from the autocomplete object.
      //   var place = autocomplete.getPlace();

        // for (var component in componentForm) {
        //   document.getElementById(component).value = '';
        //   document.getElementById(component).disabled = false;
        // }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
      //   for (var i = 0; i < place.address_components.length; i++) {
      //     var addressType = place.address_components[i].types[0];
      //     if (componentForm[addressType]) {
      //       var val = place.address_components[i][componentForm[addressType]];
      //       document.getElementById(addressType).value = val;
      //     }
      //   }
      // }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }

</script>
 <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GEOCODE_API_KEY'] %>&libraries=places&callback=initAutocomplete"
        ></script>
</script>
<%#= link_to_remove_association "remove task", f %>